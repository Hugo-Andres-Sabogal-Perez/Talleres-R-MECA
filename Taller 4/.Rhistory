# Convertir el nombre de la palabra en símbolo para usarlo en group_by
columna_palabra <- ensym(palabra)
# Agrupar por si contiene o no la palabra y calcular el promedio de precio
resultado <- datos_limpios %>%
mutate(Contiene = ifelse(grepl(palabra, titulo), 1, 0)) %>%
group_by(Contiene) %>%
summarise(Promedio_Precio = mean(Precio, na.rm = TRUE)) %>%
mutate(Palabra = palabra) %>%
select(Palabra, Contiene, Promedio_Precio)
# Agregar el resultado al dataframe final
resultados <- bind_rows(resultados, resultado)
}
# 2.11. Visualización ---------------------------------
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio Promedio de Libros según Palabra en el Título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
? mutate
resultados$Contiene <- as.String(resultados$Contiene)
View(resultados)
resultados <- data.frame()
# Iterar sobre cada palabra
for (palabra in nombres) {
# Convertir el nombre de la palabra en símbolo para usarlo en group_by
columna_palabra <- ensym(palabra)
# Agrupar por si contiene o no la palabra y calcular el promedio de precio
resultado <- datos_limpios %>%
mutate(Contiene = ifelse(grepl(palabra, titulo), 1, 0)) %>%
group_by(Contiene) %>%
summarise(Promedio_Precio = mean(Precio, na.rm = TRUE)) %>%
mutate(Palabra = palabra) %>%
select(Palabra, Contiene, Promedio_Precio)
# Agregar el resultado al dataframe final
resultados <- bind_rows(resultados, resultado)
}
View(resultados)
resultados <- resultados %>%
mutate(Contiene = ifelse(Contiene == 1, "Contiene", "No contiene"))
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio Promedio de Libros según Palabra en el Título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio Promedio de Libros según Palabra en el Título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_bw() +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio Promedio de Libros según Palabra en el Título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_minimal() +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio Promedio de Libros según Palabra en el Título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_minimal() +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_minimal() +
coord_flip()
resultados <- data.frame()
# Iterar sobre cada palabra
for (palabra in nombres) {
# Convertir el nombre de la palabra en símbolo para usarlo en group_by
columna_palabra <- ensym(palabra)
# Agrupar por si contiene o no la palabra y calcular el promedio de precio
resultado <- datos_limpios %>%
mutate(Contiene = ifelse(grepl(palabra, titulo), 1, 0)) %>%
group_by(Contiene) %>%
summarise(Promedio_Precio = mean(Precio, na.rm = TRUE)) %>%
mutate(Palabra = palabra) %>%
select(Palabra, Contiene, Promedio_Precio)
# Agregar el resultado al dataframe final
resultados <- bind_rows(resultados, resultado)
}
# 2.11. Visualización ---------------------------------
resultados <- resultados %>%
mutate(Contiene = ifelse(Contiene == 1, "Si", "No"))
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio Promedio",
fill = "Contiene la palabra") +
theme_minimal() +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 1)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.75)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.75)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros \n según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.75)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras \n en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.75)) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras \n en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.75), width = 0.7) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras \n en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.75), width = 1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras \n en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.6), width = 1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según palabras \n en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.6), width = 1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.6), width = 1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 1.2) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 1.1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 1.1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 1.1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.8) +  # Ajuste del ancho de las barras
labs(title = "Precio promedio de libros según palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
scale_fill_brewer(palette = "Set2") +  # Paleta de colores más suave
theme_minimal(base_size = 15) +  # Ajuste de tamaño de texto base
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotación de etiquetas del eje x
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "grey30"),
panel.grid.major = element_line(color = "grey85"),
panel.grid.minor = element_blank(),  # Quitar la cuadrícula menor
plot.margin = margin(20, 20, 20, 20)  # Ajuste de márgenes
) +
coord_flip()
# Punto 2 --------------------------------------------
rm(list = ls())
##2.1. Books to scrape -------------------------------
books <- "https://books.toscrape.com"
##2.2. Extraer información ---------------------------
libros_df <- data.frame()
for(page in 1:50) {
#Link
link <- paste0(books, "/catalogue/page-", page, ".html")
#Nombres de los libros
nombres_libros <- link %>%
read_html() %>%
html_nodes("article h3 a") %>%
html_attr("title")
#Precios de los libros
precio_libros <- link %>%
read_html() %>%
html_nodes(".price_color") %>%
html_text()
#Crear base de datos
libros_df <- rbind(libros_df, data.frame(
Titulo = nombres_libros,
Precio = precio_libros,
stringsAsFactors = FALSE))
#Registro de progreso
print(paste("Página:", page))
}
##2.3. Linpieza de texto -----------------------------
corpus <- Corpus(VectorSource(libros_df$Titulo))
# Procesamos el texto
corpus <- tm_map(corpus, content_transformer(tolower))  # Convertir a minúsculas
corpus <- tm_map(corpus, removePunctuation)             # Eliminar puntuación
corpus <- tm_map(corpus, removeNumbers)                 # Eliminar números
corpus <- tm_map(corpus, removeWords, stopwords("english"))  # Eliminar palabras vacías (stop words)
corpus <- tm_map(corpus, stripWhitespace)
# 2.4 Base con texto procesado -----------------------
datos_limpios <-  data.frame(titulo = sapply(corpus, as.character))
# 2.7 matriz term frecuency---------------------------
#De acuerdo con la aclaración que hizo Daniel en clase,
#esto se debe hacer antes la nube de palabras
dtm <- TermDocumentMatrix(corpus)
# Aca ya lo puedo ver.
tdm <- as.matrix(dtm)
tdm <- t(tdm)
# 2.5  creamos base count ----------------------------
count <- data.frame(colSums(tdm))
# 2.6 nube de palabras -------------------------------
wordcloud(
words = rownames(count),
freq = count$colSums.tdm.,
min.freq = 1,            # Minimum frequency to include words
max.words = 100,           # Maximum number of words
random.order = FALSE,     # Arrange words by frequency
colors = brewer.pal(8, "Dark2"),  # Set color palette
scale =c(3,0.5)
)
# 2.8 Añadir columna de precio------------------------
datos_limpios <- data.frame(datos_limpios, libros_df$Precio)
# 2.9  Seleccionar 10 palabras------------------------
# Filtrar las palabras con frecuencia mayor a 10 para escoger las palabras
palabras_frecuentes <- tdm[, colSums(tdm) > 10]
# Escoger 10 palabras aleatorias dentro de las columnas de esta nueva base
set.seed(72)
nombres <- sample(colnames(palabras_frecuentes), 10)
# Seleccionar las columnas correspondientes a las 10 palabras aleatorias
matriz10 <- palabras_frecuentes[, nombres]
# Reemplazar valores mayores a 1 por uno para tener variables dummy
matriz10[matriz10 > 1] <- 1
#Agregar las palabras a datos limpios
datos_limpios <- data.frame(datos_limpios, matriz10)
# 2.10. Agrupar precio por palabras -------------------
# Primero, se aseguran de que los precios estén en formato numérico para poder hacer cálculos
names(datos_limpios)[names(datos_limpios) == "libros_df.Precio"] <- "Precio"
datos_limpios$Precio <- str_remove_all(datos_limpios$Precio, "£")
datos_limpios$Precio <- as.numeric(datos_limpios$Precio)
# Agrupamos por palabra y calculamos el promedio del precio
resultados <- data.frame()
# Iterar sobre cada palabra
for (palabra in nombres) {
# Convertir el nombre de la palabra en símbolo para usarlo en group_by
columna_palabra <- ensym(palabra)
# Agrupar por si contiene o no la palabra y calcular el promedio de precio
resultado <- datos_limpios %>%
mutate(Contiene = ifelse(grepl(palabra, titulo), 1, 0)) %>%
group_by(Contiene) %>%
summarise(Promedio_Precio = mean(Precio, na.rm = TRUE)) %>%
mutate(Palabra = palabra) %>%
select(Palabra, Contiene, Promedio_Precio)
# Agregar el resultado al dataframe final
resultados <- bind_rows(resultados, resultado)
}
# 2.11. Visualización ---------------------------------
resultados <- resultados %>%
mutate(Contiene = ifelse(Contiene == 1, "Si", "No"))
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 1.1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
wordcloud(
words = rownames(count),
freq = count$colSums.tdm.,
min.freq = 1,            # Minimum frequency to include words
max.words = 100,           # Maximum number of words
random.order = FALSE,     # Arrange words by frequency
colors = brewer.pal(1, "Dark2"),  # Set color palette
scale =c(3,0.5)
)
wordcloud(
words = rownames(count),
freq = count$colSums.tdm.,
min.freq = 1,            # Minimum frequency to include words
max.words = 100,           # Maximum number of words
random.order = FALSE,     # Arrange words by frequency
colors = brewer.pal(1, "Dark2"),  # Set color palette
scale =c(3,0.5)
)
# 2.11. Visualización ---------------------------------
resultados <- resultados %>%
mutate(Contiene = ifelse(Contiene == 1, "Si", "No"))
ggplot(resultados, aes(x = Palabra, y = Promedio_Precio, fill = Contiene)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 1.1) +  # 'dodge' para barras lado a lado
labs(title = "Precio promedio de libros según \n palabras en el título",
x = "Palabra",
y = "Precio promedio",
fill = "Contiene la palabra") +
theme_minimal() +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) +
coord_flip()
#Taller 4 - R MECA ------------------------------------------------
rm(list = ls())
## 0.1. Librerias -------------------------------------------------
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
library("pacman")
p_load(sf, tidyverse, fastDummies, ggplot2, plotly, stringr)
## 0.2. Directorio ------------------------------------------------
# Obtener el nombre de usuario del sistema operativo
usuario <- Sys.info()["user"]
# Crear el directorio condicional dependiendo del usuario
if (usuario == "Natalia") {
setwd("C:/Users/Natalia/OneDrive - Universidad de los Andes/Documentos/2024-2/R/Talleres-R-MECA/Taller 4")
} else if (usuario == "hugos") {
setwd("")
}
#Punto 1-----------------------------------------------------------
## 1.2. Cargar Shapefile ------------------------------------------
mundo <- st_read("shapefile/geoBoundariesCGAZ_ADM0.shp")
## 1.7. Datos de WITS ---------------------------------------------
exportaciones <- read.csv("Exports/DataJobID-2761539_2761539_ExportsCOL.csv")
## 1.8. Procesamiento de datos ------------------------------------
#Cambiar el nombre de la variable de ISO3 en mundo para facilitar la unión
mundo <- mundo %>% rename(PartnerISO3 = shapeGroup)
#Mantener solo las exportaciones de colombia y seleccionar columnas relevantes
exportaciones_col <- exportaciones %>% subset(ReporterISO3 == "COL") %>% #Mantenemos las
select(PartnerISO3, PartnerName, TradeValue.in.1000.USD, ProductDescription,
ProductCode) %>%
rename(TradeValue1000USD = TradeValue.in.1000.USD) %>%
dummy_cols(select_columns = "ProductCode", remove_first_dummy = FALSE)
#Traducir categorías de productos para la visualización
translations <- c(
"ORES AND MINERALS; ELECTRICITY, GAS" = "Minería, electricidad y gas",
"FOOD PRODUCTS, BEVERAGES AND TOBACC" = "Alimentos, bebidas y tabaco",
"OTHER TRANSPORTABLE GOODS, EXCEPT M" = "Otros bienes transportables",
"METAL PRODUCTS, MACHINERY AND EQUIP" = "Productos metálicos y maquinaria",
"AGRICULTURE, FORESTRY AND FISHERY P" = "Agricultura, silvicultura y pesca"
)
exportaciones_col <- exportaciones_col %>%
mutate(ProductDescEsp = translations[ProductDescription])
# Calcular quintiles de exportación para la visualización
quintiles <- quantile(exportaciones_col$TradeValue1000USD, probs = seq(0, 1, by = 0.2))
exportaciones_col$TradeValueCateg <- cut(
exportaciones_col$TradeValue1000USD,
breaks = quintiles,
include.lowest = TRUE,  # Incluye el valor mínimo en el primer intervalo
labels = paste0(
round(quintiles[-length(quintiles)], 0),
" - ",
round(quintiles[-1], 0)))
#Unir datos de exportaciones con shapefile
exportaciones_col <- exportaciones_col %>% left_join(mundo, by="PartnerISO3")
#Crear el texto que va a aparecer al seleccionar los países en el mapa interactivo
exportaciones_col$tooltip_text <- paste("País:", exportaciones_col$PartnerName, "<br>",
"Valor Exportaciones:", exportaciones_col$TradeValue1000USD, "<br>")
View(exportaciones_col)
mapa_base <- ggplot(exportaciones_col) +
geom_sf(aes(fill = TradeValueCateg, geometry = geometry,
text = tooltip_text)) +
scale_fill_brewer(palette = "Set2",
name = "Quitiles de exportaciones (miles de USD)", na.value = "grey90") +
facet_wrap(~ ProductDescEsp, ncol = 2) +
labs(title = "Exportaciones de Colombia por Categorias de Productos",
caption = "Fuente: Elaboración propia con datos del World Integrated Trade System (WITS)") +
theme_minimal() +
theme(
strip.text = element_text(size = 8), # Ajusta el tamaño del texto en las facetas
axis.text.x = element_text(size = 4),    # Etiquetas del eje X más pequeñas
axis.text.y = element_text(size = 4),     # Etiquetas del eje Y más pequeñas
legend.title = element_text(size = 8),    # Título de la leyenda más pequeño
legend.text = element_text(size = 7),     #Texto de la leyenda más pequeño
panel.spacing = unit(0.5, "lines"),        # Espaciado entre facetas
plot.title = element_text(hjust = 0.5, size = 12, face = "bold")  # Título centrado
)
mapa_interactivo <- ggplotly(mapa_base, tooltip = "text")
mapa_interactivo
mapa_interactivo
mapa_base <- ggplot(exportaciones_col) +
geom_sf(aes(fill = TradeValueCateg, geometry = geometry,
text = tooltip_text)) +
scale_fill_brewer(palette = "Set2",
name = "Quitiles de exportaciones (miles de USD)", na.value = "grey90") +
facet_wrap(~ ProductDescEsp, ncol = 3) +
labs(title = "Exportaciones de Colombia por Categorias de Productos",
caption = "Fuente: Elaboración propia con datos del World Integrated Trade System (WITS)") +
theme_minimal() +
theme(
strip.text = element_text(size = 8), # Ajusta el tamaño del texto en las facetas
axis.text.x = element_text(size = 4),    # Etiquetas del eje X más pequeñas
axis.text.y = element_text(size = 4),     # Etiquetas del eje Y más pequeñas
legend.title = element_text(size = 8),    # Título de la leyenda más pequeño
legend.text = element_text(size = 7),     #Texto de la leyenda más pequeño
panel.spacing = unit(0.5, "lines"),        # Espaciado entre facetas
plot.title = element_text(hjust = 0.5, size = 12, face = "bold")  # Título centrado
)
mapa_interactivo <- ggplotly(mapa_base, tooltip = "text")
