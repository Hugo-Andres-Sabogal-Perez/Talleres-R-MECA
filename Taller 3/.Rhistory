# procesamos el texto
corpus <- tm_map(corpus, content_transformer(tolower))  # Convertir a minúsculas
corpus <- tm_map(corpus, removePunctuation)             # Eliminar puntuación
corpus <- tm_map(corpus, removeNumbers)                 # Eliminar números
corpus <- tm_map(corpus, removeWords, stopwords("english"))  # Eliminar palabras vacías (stop words)
corpus <- tm_map(corpus, stripWhitespace)
# 2.4 creamos base con texto procesado (datos limpios) ---------------
datos_limpios <-  data.frame(titulo = sapply(corpus, as.character))
# 2.5  creamos base count -----------------
count <- data.frame(table(datos_limpios))
# 2.6 nube de palabras ----------------
wordcloud(
words = count$titulo,
freq = count$Freq,
min.freq = 1,            # Minimum frequency to include words
max.words = 100,           # Maximum number of words
random.order = FALSE,     # Arrange words by frequency
colors = brewer.pal(8, "Dark2"),  # Set color palette
scale =c(0.6,2)
)
# 2.7 matriz term frecuency---------------
dtm <- TermDocumentMatrix(corpus)
# Aca ya lo puedo ver.
tdm <- as.matrix(dtm)
# 2.8 añadir columna de precio
datos_limpios$precio <- libros_df$Precio
# 2.9  Seleccionar 10 palabras
View(tdm)
seed(54)
seed(54)
tdm[1,]
row.names(tdm )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
View(matriz10)
rowSums(matriz10)
rowMeans(matriz10)
View(libros_df)
View(matriz10)
colMeans(matriz10)
colSums(matriz10)
rowSums(matriz10)
matriz10 <- as.numeric(
matriz10)
rowSums(matriz10)
rowSums(matriz10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
matriz10 <- as.numeric(matriz10)
matriz10 <- apply(matriz10, as.numeric)
matriz10 <- data.matrix(matriz10)
rowSums(matriz10)
View(matriz10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
class(matriz10)
matriz10 <- as.matrix(matriz10)
View(matriz10)
rowSums(matriz10)
matriz10 <- as.data.frame(matriz10)
rowSums(matriz10)
View(matriz10)
class(data.frame())
matriz10 <- apply(matriz10, 2, as.numeric)
View(libros_df)
View(libros_df)
View(matriz10)
rowSums(matriz10)
class(matrix10)
class(matriz10)
typeof(matriz10)
prueba <- matrix(c(0, 1, 1, 0, 1, 0), nrow = 2)
rowSums(prueba)
View(prueba)
# Crear una matriz con valores 0 y 1
mi_matriz <- matrix(c(0, 1, 1, 0, 1, 0), nrow = 2)
# Poner nombres a las filas
rownames(mi_matriz) <- c("Fila1", "Fila2")
# Ver la matriz
mi_matriz
# Calcular la suma de cada fila usando rowSums
resultado <- rowSums(mi_matriz)
# Mostrar el resultado
resultado
class(mi_matriz)
typeof(mi_matriz)
rowSums(matriz10)
View(matriz10)
sum(matriz10[1,])
matriz10[1,]
sum(matriz10[1,])
rowSums(tdm)
matriz10[1,]
sum(as.vecyot(matriz10[1,]))
sum(as.vector(matriz10[1,]))
ejemplo <- sum(as.vector(matriz10[1,]))
ejemplo <- matriz[1,]
ejemplo <- matriz10[1,]
ejemplo
ejemplo <- matriz10[,1]
ejemplo
View(matriz10)
set.seed(34)
nombres <- sample(row.names(tdm),10)
matriz10 <- apply(matriz10, 2, as.numeric)
class(matriz10)
rowSums(matriz10)
View(mi_matriz)
View(matriz10)
nombres <- sample(row.names(tdm),10)
rowSums(matriz10)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(76)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(7633)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(76332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(76332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(763332)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(76333254321)
set.seed(721)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(721)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(721)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(721)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(721)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
set.seed(72)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
rowSums(tdm)
View(prueba)
View(tdm)
tdm <- t(tdm)
View(tdm)
colSums(tdm)
#Taller 3
rm(list = ls())
#0.1. Librerías -------------------------------------
library(tidyverse)
library(sf)
library(openxlsx)
library(plotly)
library(rvest)
library(tidytext)
library(rebus)
library(tidyr)
library(tm)
library(wordcloud)
# Punto 2 --------------------------------------------
rm(list = ls())
##2.1. Books to scrape -------------------------------
books <- "https://books.toscrape.com"
##2.2. Extraer información ---------------------------
libros_df <- data.frame()
for(page in 1:50) {
#Link
link <- paste0(books, "/catalogue/page-", page, ".html")
#Nombres de los libros
nombres_libros <- link %>%
read_html() %>%
html_nodes("article h3 a") %>%
html_attr("title")
#Precios de los libros
precio_libros <- link %>%
read_html() %>%
html_nodes(".price_color") %>%
html_text()
#Crear base de datos
libros_df <- rbind(libros_df, data.frame(
Titulo = nombres_libros,
Precio = precio_libros,
stringsAsFactors = FALSE))
#Registro de progreso
print(paste("Pagina:", page))
}
# Punto 2 --------------------------------------------
rm(list = ls())
##2.1. Books to scrape -------------------------------
books <- "https://books.toscrape.com"
##2.2. Extraer información ---------------------------
libros_df <- data.frame()
for(page in 1:50) {
#Link
link <- paste0(books, "/catalogue/page-", page, ".html")
#Nombres de los libros
nombres_libros <- link %>%
read_html() %>%
html_nodes("article h3 a") %>%
html_attr("title")
#Precios de los libros
precio_libros <- link %>%
read_html() %>%
html_nodes(".price_color") %>%
html_text()
#Crear base de datos
libros_df <- rbind(libros_df, data.frame(
Titulo = nombres_libros,
Precio = precio_libros,
stringsAsFactors = FALSE))
#Registro de progreso
print(paste("Pagina:", page))
}
##2.3. remover stop words, minusculas, eliminación de caracteres especiales y numeros -------
corpus <- Corpus(VectorSource(libros_df$Titulo))
# procesamos el texto
corpus <- tm_map(corpus, content_transformer(tolower))  # Convertir a minúsculas
corpus <- tm_map(corpus, removePunctuation)             # Eliminar puntuación
corpus <- tm_map(corpus, removeNumbers)                 # Eliminar números
corpus <- tm_map(corpus, removeWords, stopwords("english"))  # Eliminar palabras vacías (stop words)
corpus <- tm_map(corpus, stripWhitespace)
# 2.4 creamos base con texto procesado (datos limpios) ---------------
datos_limpios <-  data.frame(titulo = sapply(corpus, as.character))
# 2.5  creamos base count -----------------
count <- data.frame(table(datos_limpios))
# 2.6 nube de palabras ----------------
wordcloud(
words = count$titulo,
freq = count$Freq,
min.freq = 1,            # Minimum frequency to include words
max.words = 100,           # Maximum number of words
random.order = FALSE,     # Arrange words by frequency
colors = brewer.pal(8, "Dark2"),  # Set color palette
scale =c(0.6,2)
)
# 2.7 matriz term frecuency---------------
dtm <- TermDocumentMatrix(corpus)
# Aca ya lo puedo ver.
tdm <- as.matrix(dtm)
tdm <- t(tdm)
View(tdm)
View(libros_df)
View(tdm)
max(count$Freq)
View(count)
count[count$Freq>1,]
View(tdm)
tdm[tdm$fruits>1,]
tdm[tdm$fruits>1,maus]
tdm[tdm$maus>1,maus]
row.names(tdm) <- libros_df$Titulo
View(tdm)
View(corpus)
View(libros_df)
tdm[tdm$maus>1,maus]
tdm[dtm$maus>1,maus]
dtm[dtm$maus>1,maus]
dtm[dtm$maus>1,]
dtm$maus
View(dtm)
View(tdm)
tdm <- as.data.frame(tdm)
tdm[tdm$maus>1,maus]
tdm[tdm$maus>1,tdmmaus]
tdm[tdm$maus>1,tdm$maus]
tdm[tdm$maus>1,]
tdm$maus
view(tdm$maus)
tdm$saga
#Taller 3
rm(list = ls())
#0.1. Librerías -------------------------------------
library(tidyverse)
library(sf)
library(openxlsx)
library(plotly)
library(rvest)
library(tidytext)
library(rebus)
library(tidyr)
library(tm)
library(wordcloud)
#0.2. Directorio ------------------------------------
setwd("C:/Users/hugos/OneDrive - Universidad de los andes/MECA/Semestre 1/taller R/Talleres-R-MECA/Taller 3")
# Punto 1 -------------------------------------------
##1.1. Cargar shapefile -----------------------------
shapefile_col <- st_read("Datos/Shapefile/MGN_ADM_MPIO_GRAFICO.shp")
shapefile_col <- shapefile_col %>% subset(dpto_cnmbr !=
"ARCHIPIÉLAGO DE SAN ANDRÉS, PROVIDENCIA Y SANTA CATALINA") %>%
rename(codmpio = mpio_cdpmp)
##1.2. Cargar Panel CEDE ----------------------------
panel_cede <- read.xlsx("Datos/CEDE/PANEL_CARACTERISTICAS_GENERALES(2022).xlsx")
panel_cede <- panel_cede %>% select(contains("cod") | contains("pob"),
depto, provincia, municipio, ano, ao_crea) %>%
mutate(codmpio = sprintf("%05d", codmpio))
##1.3. Unir bases -----------------------------------
df_completo <- shapefile_col %>% left_join(panel_cede, by = "codmpio")
#Aquí perdí 100 observaciones pero no sé por qué (Pueden ser San Andrés y Providencia del panel CEDE?)
##1.4. Mapa interactivo -----------------------------
datos_mapa <- subset(df_completo, df_completo$ano == 2009)
mapa <- ggplot(data = datos_mapa) +
geom_sf(aes(fill = pobl_rur), size = 0.1) +  # Color y borde de los municipios
scale_fill_viridis_c(name = "Población Rural", option = "viridis", labels = scales::comma) +  # Escala de color
labs(title = "Mapa de Población Rural por Municipio (2009)") +
theme_minimal() +
theme(
plot.title = element_text(size = 12, face = "bold"),
legend.position = "bottom")
mapa
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
mapa_interactivo
# Punto 2 --------------------------------------------
rm(list = ls())
##2.1. Books to scrape -------------------------------
books <- "https://books.toscrape.com"
##2.2. Extraer información ---------------------------
libros_df <- data.frame()
for(page in 1:50) {
#Link
link <- paste0(books, "/catalogue/page-", page, ".html")
#Nombres de los libros
nombres_libros <- link %>%
read_html() %>%
html_nodes("article h3 a") %>%
html_attr("title")
#Precios de los libros
precio_libros <- link %>%
read_html() %>%
html_nodes(".price_color") %>%
html_text()
#Crear base de datos
libros_df <- rbind(libros_df, data.frame(
Titulo = nombres_libros,
Precio = precio_libros,
stringsAsFactors = FALSE))
#Registro de progreso
print(paste("Pagina:", page))
}
##2.3. remover stop words, minusculas, eliminación de caracteres especiales y numeros -------
corpus <- Corpus(VectorSource(libros_df$Titulo))
# procesamos el texto
corpus <- tm_map(corpus, content_transformer(tolower))  # Convertir a minúsculas
corpus <- tm_map(corpus, removePunctuation)             # Eliminar puntuación
corpus <- tm_map(corpus, removeNumbers)                 # Eliminar números
corpus <- tm_map(corpus, removeWords, stopwords("english"))  # Eliminar palabras vacías (stop words)
corpus <- tm_map(corpus, stripWhitespace)
# 2.4 creamos base con texto procesado (datos limpios) ---------------
datos_limpios <-  data.frame(titulo = sapply(corpus, as.character))
# 2.5  creamos base count -----------------
count <- data.frame(table(datos_limpios))
# 2.6 nube de palabras ----------------
wordcloud(
words = count$titulo,
freq = count$Freq,
min.freq = 1,            # Minimum frequency to include words
max.words = 100,           # Maximum number of words
random.order = FALSE,     # Arrange words by frequency
colors = brewer.pal(8, "Dark2"),  # Set color palette
scale =c(0.6,2)
)
# 2.7 matriz term frecuency---------------
dtm <- TermDocumentMatrix(corpus)
# Aca ya lo puedo ver.
tdm <- as.matrix(dtm)
tdm <- t(tdm)
row.names(tdm) <- libros_df$Titulo
# 2.8 añadir columna de precio
datos_limpios$precio <- libros_df$Precio
# 2.9  Seleccionar 10 palabras
set.seed(72)
nombres <- sample(row.names(tdm),10)
matriz10 <- tdm[rownames(tdm) %in% nombres, ]
rowSums(matriz10 )
colSums(tdm)
